{"version":3,"file":"static/js/622.20439cf8.chunk.js","mappings":"gOAEaA,E,MAAaC,GAAAA,OAAa,CACrCC,QAAS,gCACTC,OAAQ,CACNC,QAAQ,sCCDCC,EAAW,SAACC,EAAUC,GACjC,OAA4BC,EAAAA,EAAAA,UAAS,QAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KAkCA,OAhCAC,EAAAA,EAAAA,YAAU,WACR,IAAIC,EACJ,OAAQR,GACN,IAAK,WACHQ,EAAa,CAAC,GAAD,OAAIR,EAAJ,gBACb,MACF,IAAK,QACHQ,EAAa,CAAC,UAAD,OAAWP,IACxB,MACF,IAAK,UACL,IAAK,UACHO,EAAa,CAAC,UAAD,OAAWP,EAAX,YAAoBD,IACjC,MACF,IAAK,SACHQ,EAAcP,EAEV,CAAC,IAAD,OAAKD,EAAL,UAAuB,CAAEH,OAAQ,CAAEI,MAAAA,KADnC,MAQR,iBAAC,iFACCG,EAAU,YADX,KAICE,EAJD,KAISE,GAJT,qCAI8Bd,EAAWe,IAAXf,MAAAA,GAAU,OAAQc,IAJhD,mDAKCJ,EAAU,WALX,2CAAD,EAOD,GAAE,CAACJ,EAAUC,IAEPI,EAAO,CAACA,EAAMF,GAAU,CAAC,GAAIA,EACrC,C,uFCWD,UA9CqB,WACnB,IAAMO,GAAOC,EAAAA,EAAAA,MAAPD,GACN,GAGIR,EAAAA,EAAAA,UAAS,CAAC,GAHd,sBACIU,EADJ,EACIA,YAAaC,EADjB,EACiBA,OAAQC,EADzB,EACyBA,aAAcC,EADvC,EACuCA,SAAUC,EADjD,EACiDA,MAAOC,EADxD,EACwDA,aACtDC,EAFF,KAIA,GAA+BnB,EAAAA,EAAAA,GAAS,QAASW,GAAxCL,GAAT,eAASA,KACHc,GAAWC,EAAAA,EAAAA,MAKjB,OAJAb,EAAAA,EAAAA,YAAU,WACRF,GAAQa,EAAgBb,EACzB,GAAE,CAACA,IAGFS,IACE,iCACE,SAAC,KAAD,CAAYO,GAAIF,EAASG,MAAQH,EAASG,MAAMC,KAAO,IAAvD,yDAIA,mBACA,iBAAKC,MAAO,CAAEC,QAAS,QAAvB,WACE,gBAAKC,IAAG,yCAAoCd,GAAee,IAAI,MAC/D,iBAAKH,MAAO,CAAEI,OAAQ,QAAtB,WACE,kCAAQZ,EAAR,aAAkBF,EAAae,UAAU,EAAG,GAA5C,QACA,wCAAuC,GAAvBC,OAAOb,GAAvB,QACA,sCACA,uBAAIF,KACJ,mCACCF,EAAOkB,KAAI,SAAAC,GACV,OACE,kBAAuBR,MAAO,CAAES,aAAc,OAA9C,UACGD,EAAME,KAAM,MADJF,EAAME,KAIpB,WAGL,mBACA,SAAC,KAAD,CAAYb,GAAG,OAAf,mBACA,SAAC,KAAD,CAAYA,GAAG,UAAf,sBACA,SAAC,KAAD,MAIP,C","sources":["services/request-config.js","hooks/useFetch.js","pages/Movies/components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const tmdbConfig = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: `46e4b076bb2368b618b662908195e79d`,\n  },\n});\n","import { useState, useEffect } from 'react';\n\nimport { tmdbConfig } from 'services/request-config';\n\nexport const useFetch = (endpoint, query) => {\n  const [status, setStatus] = useState('idle');\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    let requestUrl;\n    switch (endpoint) {\n      case 'trending':\n        requestUrl = [`${endpoint}/movie/week`];\n        break;\n      case 'movie':\n        requestUrl = [`/movie/${query}`];\n        break;\n      case 'credits':\n      case 'reviews':\n        requestUrl = [`/movie/${query}/${endpoint}`];\n        break;\n      case 'search':\n        requestUrl = !query\n          ? null\n          : [`/${endpoint}/movie`, { params: { query } }];\n\n        break;\n      default:\n        break;\n    }\n\n    (async () => {\n      setStatus('fetching');\n      // const data = requestUrl && (await tmdbConfig.get(...requestUrl));\n\n      setData(requestUrl && (await tmdbConfig.get(...requestUrl)));\n      setStatus('fetched');\n    })();\n  }, [endpoint, query]);\n\n  return data ? [data, status] : [[], status];\n};\n\n// export const App = () => {\n//   const [query, setQuery] = useState('');\n//   const [status, data] = useFetch(query);\n\n//   useEffect(() => {\n//     if (data.length) {\n//       console.log(data);\n//       console.log(status);\n//     }\n//   }, [data, status]);\n\n//   const onInputChange = e => {\n//     e.preventDefault();\n//     setQuery(e.target.name.value);\n//   };\n\n//   return (\n//     <div>\n//       <form action=\"\" onSubmit={onInputChange}>\n//         <input type=\"text\" name=\"name\"></input>\n//         <button type=\"submit\">Запрос</button>\n//       </form>\n//     </div>\n//   );\n// };\n","import { useEffect, useState } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\n\nimport { Link as StyledLink } from 'components/SharedLayout/SharedLayout.styled';\nimport { useFetch } from 'hooks/useFetch';\n\nconst MovieDetails = () => {\n  let { id } = useParams();\n  const [\n    { poster_path, genres, release_date, overview, title, vote_average },\n    setMovieDetails,\n  ] = useState({});\n  const [{ data } /*status */] = useFetch('movie', id);\n  const location = useLocation();\n  useEffect(() => {\n    data && setMovieDetails(data);\n  }, [data]);\n\n  return (\n    release_date && (\n      <>\n        <StyledLink to={location.state ? location.state.from : '/'}>\n          Обратно\n        </StyledLink>\n\n        <br />\n        <div style={{ display: 'flex' }}>\n          <img src={`https://image.tmdb.org/t/p/w300${poster_path}`} alt=\"\" />\n          <div style={{ margin: '25px' }}>\n            <h2>{`${title} (${release_date.substring(0, 4)})`}</h2>\n            <p>User Score: {Number(vote_average) * 10}%</p>\n            <h3>Overview</h3>\n            <p>{overview}</p>\n            <h3>Genres</h3>\n            {genres.map(genre => {\n              return (\n                <span key={genre.name} style={{ marginBottom: '5px' }}>\n                  {genre.name}{' '}\n                </span>\n              );\n            })}\n          </div>\n        </div>\n        <br />\n        <StyledLink to=\"cast\">Cast</StyledLink>\n        <StyledLink to=\"reviews\">Reviews</StyledLink>\n        <Outlet />\n      </>\n    )\n  );\n};\n\nexport default MovieDetails;\n"],"names":["tmdbConfig","axios","baseURL","params","api_key","useFetch","endpoint","query","useState","status","setStatus","data","setData","useEffect","requestUrl","get","id","useParams","poster_path","genres","release_date","overview","title","vote_average","setMovieDetails","location","useLocation","to","state","from","style","display","src","alt","margin","substring","Number","map","genre","marginBottom","name"],"sourceRoot":""}